<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editor de Listas M3U</title>
    
    <!-- Tailwind CSS para un diseño moderno y responsivo -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- HLS.js para reproducir streams HLS (m3u8) -->
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    
    <!-- Iconos de Phosphor Icons -->
    <script src="https://unpkg.com/@phosphor-icons/web"></script>
    
    <style>
        /* Estilos personalizados para mejorar la apariencia */
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Scrollbar personalizado */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #1f2937; /* bg-gray-800 */
        }
        ::-webkit-scrollbar-thumb {
            background: #4b5563; /* bg-gray-600 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #6b7280; /* bg-gray-500 */
        }
        .channel-item.selected {
            background-color: #3b82f6; /* bg-blue-600 */
            color: white;
        }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body class="bg-gray-900 text-white antialiased">

    <div id="app" class="flex flex-col lg:flex-row h-screen overflow-hidden">

        <!-- Columna Izquierda: Lista de Canales y Controles -->
        <aside class="w-full lg:w-1/3 xl:w-1/4 bg-gray-800 flex flex-col p-4 border-r border-gray-700">
            <header class="mb-4">
                <h1 class="text-2xl font-bold text-white flex items-center gap-2">
                    <i class="ph-fill ph-list-dashes"></i> Editor M3U
                </h1>
                <p class="text-sm text-gray-400">Carga, edita y guarda tus listas de canales.</p>
            </header>

            <!-- Controles Principales -->
            <div class="grid grid-cols-2 gap-2 mb-4">
                <label for="file-upload" class="w-full cursor-pointer bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg inline-flex items-center justify-center transition-colors">
                    <i class="ph ph-upload-simple mr-2"></i> Cargar Lista
                </label>
                <input id="file-upload" type="file" class="hidden" accept=".m3u,.m3u8">
                
                <button id="download-btn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg inline-flex items-center justify-center transition-colors">
                    <i class="ph ph-download-simple mr-2"></i> Descargar
                </button>
            </div>
            <button id="add-channel-btn" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg inline-flex items-center justify-center transition-colors mb-4">
                <i class="ph ph-plus-circle mr-2"></i> Añadir Canal
            </button>

            <!-- Filtro de Búsqueda -->
            <div class="relative mb-4">
                <input type="text" id="search-input" placeholder="Buscar canal o grupo..." class="w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-4 pl-10 text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                <i class="ph ph-magnifying-glass absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
            </div>
            
            <!-- Lista de Canales -->
            <div id="channel-list-container" class="flex-grow overflow-y-auto">
                <ul id="channel-list">
                    <!-- Los canales se insertarán aquí dinámicamente -->
                </ul>
            </div>
        </aside>

        <!-- Columna Derecha: Reproductor y Contenido Dinámico -->
        <main class="w-full lg:w-2/3 xl:w-3/4 flex flex-col p-4">
            <!-- Reproductor de Video con Contenedor de Error -->
            <div id="video-player-container" class="bg-black rounded-lg mb-4 aspect-video flex items-center justify-center relative flex-shrink-0 max-h-[50vh]">
                <video id="video-player" class="w-full h-full rounded-lg" controls></video>
                <div id="video-error-overlay" class="absolute inset-0 bg-black bg-opacity-80 flex-col items-center justify-center text-center p-4 hidden">
                    <i class="ph-fill ph-warning-circle text-5xl text-red-500 mb-4"></i>
                    <h3 class="text-xl font-bold text-white mb-2">Error al Cargar el Canal</h3>
                    <p class="text-gray-300" id="video-error-message"></p>
                </div>
            </div>
            
            <div class="flex-grow relative overflow-y-auto">
                <!-- Información del Canal Seleccionado -->
                <div id="channel-info" class="bg-gray-800 p-4 rounded-lg hidden">
                    <h2 class="text-xl font-bold" id="info-title"></h2>
                    <p class="text-gray-400" id="info-group"></p>
                    <p class="text-sm text-gray-500 break-all" id="info-url"></p>
                </div>
                
                <!-- Guía de Usuario (Visible por defecto) -->
                <div id="user-guide" class="bg-gray-800 p-6 rounded-lg">
                    <h2 class="text-2xl font-bold mb-4 flex items-center gap-2"><i class="ph-fill ph-book-open"></i> Guía de Usuario</h2>
                    <ol class="list-decimal list-inside space-y-3 text-gray-300">
                        <li><strong>Cargar Lista:</strong> Haz clic en <span class="font-semibold text-blue-400">"Cargar Lista"</span> para seleccionar un archivo `.m3u` de tu dispositivo.</li>
                        <li><strong>Seleccionar Canal:</strong> Haz clic en un canal de la lista para reproducirlo y ver su información.</li>
                        <li><strong>Editar Canal:</strong> Usa el botón <i class="ph ph-pencil-simple text-yellow-400"></i> para modificar el logo, nombre, grupo y URL de un canal.</li>
                        <li><strong>Mover Canales:</strong> Utiliza las flechas <i class="ph ph-arrow-up text-green-400"></i> y <i class="ph ph-arrow-down text-red-400"></i> para cambiar la posición de un canal.</li>
                        <li><strong>Eliminar Canal:</strong> Presiona el botón <i class="ph ph-trash text-red-500"></i> para quitar un canal de la lista.</li>
                        <li><strong>Añadir Canal:</strong> Haz clic en <span class="font-semibold text-indigo-400">"Añadir Canal"</span> para agregar una nueva entrada a la lista.</li>
                        <li><strong>Descargar Lista:</strong> Cuando termines de editar, haz clic en <span class="font-semibold text-green-400">"Descargar"</span> para guardar la lista modificada como un nuevo archivo `.m3u`.</li>
                    </ol>
                </div>

                <!-- Formulario de Edición (Oculto por defecto) -->
                <div id="edit-form-container" class="bg-gray-800 rounded-lg shadow-xl p-6 hidden">
                    <h2 id="form-title" class="text-2xl font-bold mb-6">Editar Canal</h2>
                    <form id="edit-form">
                        <input type="hidden" id="edit-index">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="mb-4">
                                <label for="edit-title" class="block text-sm font-medium text-gray-300 mb-1">Título del Canal</label>
                                <input type="text" id="edit-title" class="w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                            </div>
                            <div class="mb-4">
                                <label for="edit-group" class="block text-sm font-medium text-gray-300 mb-1">Grupo</label>
                                <input type="text" id="edit-group" class="w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="edit-logo" class="block text-sm font-medium text-gray-300 mb-1">URL del Logo</label>
                            <input type="url" id="edit-logo" class="w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div class="mb-6">
                            <label for="edit-url" class="block text-sm font-medium text-gray-300 mb-1">URL del Stream</label>
                            <input type="url" id="edit-url" class="w-full bg-gray-700 border border-gray-600 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                        </div>
                        <div class="flex justify-end gap-4">
                            <button type="button" id="cancel-edit-btn" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-6 rounded-lg transition-colors">Cancelar</button>
                            <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition-colors">Salvar Cambios</button>
                        </div>
                    </form>
                </div>
            </div>
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Referencias a elementos del DOM
            const fileUpload = document.getElementById('file-upload');
            const downloadBtn = document.getElementById('download-btn');
            const channelListUl = document.getElementById('channel-list');
            const searchInput = document.getElementById('search-input');
            const videoPlayer = document.getElementById('video-player');
            const addChannelBtn = document.getElementById('add-channel-btn');

            // Contenedores de contenido dinámico
            const userGuide = document.getElementById('user-guide');
            const channelInfoDiv = document.getElementById('channel-info');
            const editFormContainer = document.getElementById('edit-form-container');
            const videoErrorOverlay = document.getElementById('video-error-overlay');
            const videoErrorMessage = document.getElementById('video-error-message');

            // Elementos del formulario de edición
            const editForm = document.getElementById('edit-form');
            const formTitle = document.getElementById('form-title');
            const cancelEditBtn = document.getElementById('cancel-edit-btn');
            
            // Elementos de la info del canal
            const infoTitle = document.getElementById('info-title');
            const infoGroup = document.getElementById('info-group');
            const infoUrl = document.getElementById('info-url');

            // Almacenamiento de datos
            let channels = [];
            let hls;
            let currentPlayingIndex = -1;

            // --- Lógica de Almacenamiento Local ---
            const saveChannelsToLocalStorage = () => {
                try {
                    localStorage.setItem('m3uEditorChannels', JSON.stringify(channels));
                } catch (e) {
                    console.error("Error al guardar en localStorage:", e);
                }
            };

            const loadChannelsFromLocalStorage = () => {
                const savedChannelsJSON = localStorage.getItem('m3uEditorChannels');
                if (savedChannelsJSON) {
                    try {
                        const parsed = JSON.parse(savedChannelsJSON);
                        if (Array.isArray(parsed)) {
                            channels = parsed;
                            return; // Salida exitosa
                        }
                    } catch (e) {
                        console.error("Error al cargar canales desde localStorage:", e);
                    }
                }
                // Si no hay datos o hay un error, carga los de ejemplo.
                loadSampleData();
            };

            // --- Lógica de UI ---
            const updateButtonStates = () => {
                downloadBtn.disabled = channels.length === 0;
                downloadBtn.classList.toggle('opacity-50', channels.length === 0);
                downloadBtn.classList.toggle('cursor-not-allowed', channels.length === 0);
            };

            // --- Lógica Principal ---
            const parseM3U = (m3uContent) => {
                const lines = m3uContent.split('\n');
                const parsedChannels = [];
                let currentChannel = {};

                if (!lines[0].startsWith('#EXTM3U')) {
                    console.error('El archivo no es una lista M3U válida.');
                    channelListUl.innerHTML = `<li class="text-red-400 p-4 text-center">Error: El archivo no es una lista M3U válida.</li>`;
                    channels = [];
                } else {
                    lines.forEach(line => {
                        line = line.trim();
                        if (line.startsWith('#EXTINF:')) {
                            const info = line.substring(8).trim();
                            const titleMatch = info.match(/,(.+)$/);
                            currentChannel.title = titleMatch ? titleMatch[1] : 'Sin Título';
                            const logoMatch = info.match(/tvg-logo="([^"]+)"/);
                            currentChannel.logo = logoMatch ? logoMatch[1] : '';
                            const groupMatch = info.match(/group-title="([^"]+)"/);
                            currentChannel.group = groupMatch ? groupMatch[1] : 'Sin Grupo';
                        } else if (line && !line.startsWith('#')) {
                            currentChannel.url = line;
                            parsedChannels.push(currentChannel);
                            currentChannel = {};
                        }
                    });
                    channels = parsedChannels;
                }
            };

            const renderChannelList = (filter = '') => {
                channelListUl.innerHTML = '';
                const lowerCaseFilter = filter.toLowerCase();
                let itemsRendered = 0;

                channels.forEach((channel, index) => {
                    if (filter && !channel.title.toLowerCase().includes(lowerCaseFilter) && !channel.group.toLowerCase().includes(lowerCaseFilter)) {
                        return;
                    }
                    itemsRendered++;
                    
                    const li = document.createElement('li');
                    li.className = `channel-item flex items-center p-3 border-b border-gray-700 hover:bg-gray-700 cursor-pointer transition-colors ${index === currentPlayingIndex ? 'selected' : ''}`;
                    li.dataset.index = index;

                    const logoImg = document.createElement('img');
                    logoImg.src = channel.logo || 'https://placehold.co/40x40/1f2937/ffffff?text=?';
                    logoImg.alt = 'Logo';
                    logoImg.className = 'w-10 h-10 rounded-md mr-4 object-cover bg-gray-600';
                    logoImg.onerror = () => { logoImg.src = 'https://placehold.co/40x40/1f2937/ffffff?text=?'; };

                    const textDiv = document.createElement('div');
                    textDiv.className = 'flex-grow';
                    textDiv.innerHTML = `<p class="font-semibold text-sm">${channel.title}</p><p class="text-xs text-gray-400">${channel.group}</p>`;

                    const controlsDiv = document.createElement('div');
                    controlsDiv.className = 'flex items-center gap-1 ml-2';
                    controlsDiv.innerHTML = `
                        <button class="move-up-btn p-1 rounded-full hover:bg-gray-600" title="Mover Arriba"><i class="ph ph-arrow-up text-lg text-green-400"></i></button>
                        <button class="move-down-btn p-1 rounded-full hover:bg-gray-600" title="Mover Abajo"><i class="ph ph-arrow-down text-lg text-red-400"></i></button>
                        <button class="edit-btn p-1 rounded-full hover:bg-gray-600" title="Editar"><i class="ph ph-pencil-simple text-lg text-yellow-400"></i></button>
                        <button class="delete-btn p-1 rounded-full hover:bg-gray-600" title="Eliminar"><i class="ph ph-trash text-lg text-red-500"></i></button>`;
                    
                    li.appendChild(logoImg);
                    li.appendChild(textDiv);
                    li.appendChild(controlsDiv);
                    channelListUl.appendChild(li);
                });

                if (channels.length === 0) {
                    channelListUl.innerHTML = `<li class="text-gray-500 p-4 text-center">Carga una lista M3U para empezar.</li>`;
                } else if (itemsRendered === 0) {
                    channelListUl.innerHTML = `<li class="text-gray-500 p-4 text-center">No se encontraron resultados.</li>`;
                }
            };

            const playChannel = (index) => {
                if (index < 0 || index >= channels.length) return;
                
                videoErrorOverlay.classList.add('hidden');
                const channel = channels[index];
                currentPlayingIndex = index;
                
                infoTitle.textContent = channel.title;
                infoGroup.textContent = channel.group;
                infoUrl.textContent = channel.url;
                
                channelInfoDiv.classList.remove('hidden');
                userGuide.classList.add('hidden');
                editFormContainer.classList.add('hidden');

                if (hls) hls.destroy();

                const playVideo = async () => {
                    try {
                        await videoPlayer.play();
                    } catch (error) {
                        if (error.name !== 'AbortError') console.error("Error al reproducir:", error);
                    }
                };

                if (Hls.isSupported() && channel.url.includes('.m3u8')) {
                    hls = new Hls();
                    hls.loadSource(channel.url);
                    hls.attachMedia(videoPlayer);
                    hls.on(Hls.Events.MANIFEST_PARSED, playVideo);
                    
                    hls.on(Hls.Events.ERROR, (event, data) => {
                        if (data.fatal) {
                            console.error('Error fatal de HLS:', data);
                            switch (data.type) {
                                case Hls.ErrorTypes.NETWORK_ERROR:
                                    if (data.details === Hls.ErrorDetails.MANIFEST_LOAD_ERROR) {
                                        videoErrorMessage.textContent = 'La URL del canal no se encontró (Error 404). Puede que esté incorrecta o el stream esté fuera de línea.';
                                        videoErrorOverlay.classList.remove('hidden');
                                    } else {
                                        videoErrorMessage.textContent = 'Error de red al cargar el canal.';
                                        videoErrorOverlay.classList.remove('hidden');
                                    }
                                    break;
                                case Hls.ErrorTypes.MEDIA_ERROR:
                                    videoErrorMessage.textContent = 'Error en el contenido del video. El formato podría no ser compatible.';
                                    videoErrorOverlay.classList.remove('hidden');
                                    hls.recoverMediaError();
                                    break;
                                default:
                                    videoErrorMessage.textContent = 'Ocurrió un error inesperado al cargar el canal.';
                                    videoErrorOverlay.classList.remove('hidden');
                                    hls.destroy();
                                    break;
                            }
                        }
                    });
                } else {
                    videoPlayer.src = channel.url;
                    playVideo();
                }
                renderChannelList(searchInput.value);
            };
            
            const openEditor = (index = null) => {
                editFormContainer.classList.remove('hidden');
                userGuide.classList.add('hidden');
                channelInfoDiv.classList.add('hidden');
                editForm.reset();
                
                if (index !== null && channels[index]) {
                    const channel = channels[index];
                    formTitle.textContent = 'Editar Canal';
                    document.getElementById('edit-index').value = index;
                    document.getElementById('edit-title').value = channel.title;
                    document.getElementById('edit-logo').value = channel.logo;
                    document.getElementById('edit-group').value = channel.group;
                    document.getElementById('edit-url').value = channel.url;
                } else {
                    formTitle.textContent = 'Añadir Nuevo Canal';
                    document.getElementById('edit-index').value = '';
                }
            };

            const closeEditor = () => {
                editFormContainer.classList.add('hidden');
                if (currentPlayingIndex !== -1) {
                    channelInfoDiv.classList.remove('hidden');
                } else {
                    userGuide.classList.remove('hidden');
                }
            };

            const generateM3UContent = () => {
                let content = '#EXTM3U\n';
                channels.forEach(channel => {
                    content += `#EXTINF:-1 tvg-logo="${channel.logo || ''}" group-title="${channel.group || ''}",${channel.title}\n`;
                    content += `${channel.url}\n`;
                });
                return content;
            };
            
            const loadSampleData = () => {
                const sampleM3U = `#EXTM3U
#EXTINF:-1 tvg-logo="https://i.imgur.com/gN3a2V8.png" group-title="Noticias",Canal de Noticias 24h
http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4
#EXTINF:-1 tvg-logo="https://i.imgur.com/P5u1s4U.png" group-title="Música",Canal de Videos Musicales
http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4
#EXTINF:-1 tvg-logo="https://i.imgur.com/e8s2w5s.png" group-title="Cine",Películas Clásicas
http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4
#EXTINF:-1 tvg-logo="https://upload.wikimedia.org/wikipedia/commons/1/13/Big_Buck_Bunny_logo.svg" group-title="Animación",Big Buck Bunny (HLS)
https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8
#EXTINF:-1 tvg-logo="" group-title="Error",Canal Roto (404)
https://liveingesta118.cdnmedia.tv/trivision36live/smil:dvrlive.smil/playlist.m3u8`;
                parseM3U(sampleM3U);
            };

            // --- Event Listeners ---
            fileUpload.addEventListener('change', (event) => {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        parseM3U(e.target.result);
                        renderChannelList();
                        updateButtonStates();
                        saveChannelsToLocalStorage(); // Guardar nueva lista
                    };
                    reader.readAsText(file);
                }
            });

            downloadBtn.addEventListener('click', () => {
                const m3uContent = generateM3UContent();
                const blob = new Blob([m3uContent], { type: 'application/vnd.apple.mpegurl;charset=utf-8' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'lista_editada.m3u';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            });
            
            searchInput.addEventListener('input', (e) => renderChannelList(e.target.value));

            channelListUl.addEventListener('click', (e) => {
                const li = e.target.closest('.channel-item');
                if (!li) return;
                const index = parseInt(li.dataset.index, 10);
                if (isNaN(index)) return;

                if (e.target.closest('.edit-btn')) {
                    e.stopPropagation();
                    openEditor(index);
                } else if (e.target.closest('.delete-btn')) {
                    e.stopPropagation();
                    if (confirm(`¿Seguro que quieres eliminar "${channels[index].title}"?`)) {
                        channels.splice(index, 1);
                        if(index === currentPlayingIndex) {
                            videoPlayer.pause();
                            videoPlayer.src = '';
                            currentPlayingIndex = -1;
                            userGuide.classList.remove('hidden');
                            channelInfoDiv.classList.add('hidden');
                            editFormContainer.classList.add('hidden');
                        } else if (index < currentPlayingIndex) {
                            currentPlayingIndex--;
                        }
                        renderChannelList(searchInput.value);
                        updateButtonStates();
                        saveChannelsToLocalStorage(); // Guardar cambios
                    }
                } else if (e.target.closest('.move-up-btn')) {
                    e.stopPropagation();
                    if (index > 0) {
                        [channels[index], channels[index - 1]] = [channels[index - 1], channels[index]];
                        if(index === currentPlayingIndex) currentPlayingIndex--;
                        else if (index - 1 === currentPlayingIndex) currentPlayingIndex++;
                        renderChannelList(searchInput.value);
                        saveChannelsToLocalStorage(); // Guardar cambios
                    }
                } else if (e.target.closest('.move-down-btn')) {
                    e.stopPropagation();
                    if (index < channels.length - 1) {
                        [channels[index], channels[index + 1]] = [channels[index + 1], channels[index]];
                        if(index === currentPlayingIndex) currentPlayingIndex++;
                        else if (index + 1 === currentPlayingIndex) currentPlayingIndex--;
                        renderChannelList(searchInput.value);
                        saveChannelsToLocalStorage(); // Guardar cambios
                    }
                } else {
                    playChannel(index);
                }
            });

            addChannelBtn.addEventListener('click', () => openEditor(null));
            cancelEditBtn.addEventListener('click', closeEditor);

            editForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const indexStr = document.getElementById('edit-index').value;
                const updatedChannel = {
                    title: document.getElementById('edit-title').value,
                    logo: document.getElementById('edit-logo').value,
                    group: document.getElementById('edit-group').value,
                    url: document.getElementById('edit-url').value,
                };
                
                if (indexStr) {
                    const index = parseInt(indexStr, 10);
                    channels[index] = updatedChannel;
                } else {
                    channels.push(updatedChannel);
                }
                
                renderChannelList(searchInput.value);
                updateButtonStates();
                closeEditor();
                saveChannelsToLocalStorage(); // Guardar cambios
            });
            
            // --- Inicialización ---
            loadChannelsFromLocalStorage();
            renderChannelList();
            updateButtonStates();
            userGuide.classList.remove('hidden');
        });
    </script>
</body>
</html>
